<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player_spr</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// create any variables which will be relevant later
global.dash_press = false;
global.player_speed = 3;
global.allow_dash = true;
// global.target_x = 0;
// global.target_y = 0;

// set any attributes
direction = 90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// allow pressing of button
global.allow_dash = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// variables for directions
right_key = keyboard_check(ord('D'));
// right_arrow = keyboard_check(vk_right);
left_key = keyboard_check(ord('A'));
// left_arrow = keyboard_check(vk_left);
up_key = keyboard_check(ord('W'));
// up_arrow = keyboard_check(vk_up);
down_key = keyboard_check(ord('S'));
// down_arrow = keyboard_check(vk_down);
// distance = point_distance(x, y, global.target_x, global.target_y);
space_bar = keyboard_check_pressed(vk_space);
mouse_press = mouse_check_button_pressed(mb_left);
wall_collision_right = place_meeting(x + global.player_speed, y, wall_obj);
wall_collision_left = place_meeting(x - global.player_speed, y, wall_obj);
wall_collision_up = place_meeting(x, y - global.player_speed, wall_obj);
wall_collision_down = place_meeting(x, y + global.player_speed, wall_obj);

// variables for mouse input and position change when mouse clicked
if (mouse_press or space_bar) {
    if (global.allow_dash and !global.dash_press) {
        global.dash_press = true;
        global.allow_dash = false;
        // global.target_x = mouse_obj.x;
        // global.target_y = mouse_obj.y;
        // position_obj.x = global.target_x;
        // position_obj.y = global.target_y;
        // position_obj.visible = true;
        // direction = point_direction(x, y, global.target_x, global.target_y);
        speed = 1000;
        // distance = clamp(distance, 15, 700);
    }
}

// move player position if mouse has been pressed
if (global.dash_press and speed &gt; 1) {
    // code to implement gradual stop
    speed = round(speed * 0.2) + 1;
    // distance = round(distance * 0.2) + 1;
    // move_towards_point(global.target_x, global.target_y, distance);
} else if (global.dash_press) {
    speed = 0;
    global.dash_press = false;
    alarm[0] = room_speed;
    mouse_obj.image_angle += room_speed + 5;
    // position_obj.visible = false;
}

// move in direction depending on input
if (not global.dash_press) {
    if (right_key and !wall_collision_right) {
        x += global.player_speed;
        direction = 0;
    }
    if (left_key and !wall_collision_left) {
        x -= global.player_speed;
        direction = 180;
    }
    if (up_key and !wall_collision_up) {
        y -= global.player_speed;
        direction = 90;
    }
    if (down_key and !wall_collision_down) {
        y += global.player_speed;
        direction = 270;
    }
    if (up_key and right_key and !(wall_collision_up or wall_collision_right)) {
        direction = 45;
    }
    if (up_key and left_key and !(wall_collision_up or wall_collision_left)) {
        direction = 135;
    }
    if (down_key and left_key and !(wall_collision_down or wall_collision_left)) {
        direction = 225;
    }
    if (down_key and right_key and !(wall_collision_down or wall_collision_right)) {
        direction = 315;
    }
}

// keep player within room boundaries
x = clamp(x, 0, room_width);
y = clamp(y, 0, room_height);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>mouse_obj</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// player feedback on when they can dash, rotating mouse object
if (!global.allow_dash) {
    image_angle -= 1;
} else {
    image_angle = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
